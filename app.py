from flask import Flask, render_template, request, redirect, session, url_for
from auth import validate_ipa_user, validate_secondary_auth

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # –ø–æ–º–µ–Ω—è–π –Ω–∞ —á—Ç–æ-—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ

@app.route('/')
def index():
    if not session.get('authenticated'):
        return redirect(url_for('login_step1'))
    return render_template('main.html')

@app.route('/login/step1', methods=['GET', 'POST'])
def login_step1():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if validate_ipa_user(username, password):
            session['ipa_user'] = username
            return redirect(url_for('login_step2'))
        else:
            return render_template('login_step1.html', error="–ù–µ–≤–µ—Ä–Ω—ã–µ IPA –¥–∞–Ω–Ω—ã–µ.")
    return render_template('login_step1.html')

@app.route('/login/step2', methods=['GET', 'POST'])
def login_step2():
    if 'ipa_user' not in session:
        return redirect(url_for('login_step1'))

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if validate_secondary_auth(username, password):
            session['authenticated'] = True
            return redirect(url_for('index'))
        else:
            return render_template('login_step2.html', error="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    return render_template('login_step2.html')

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login_step1'))


@app.route('/scripts')
def snos_scripts():
    # –í –±—É–¥—É—â–µ–º: —Ç—è–Ω—É—Ç—å –∏–∑ –ë–î
    scripts = [
        {"id": 1, "name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤", "description": "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö —É–∑–ª–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞."},
        {"id": 2, "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HDFS", "description": "–í—ã–ø–æ–ª–Ω—è–µ—Ç health-check —Å–µ—Ä–≤–∏—Å–æ–≤ HDFS –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."},
        {"id": 3, "name": "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", "description": "–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Hadoop."},
        {"id": 4, "name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤", "description": "–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö —É–∑–ª–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞."},
        {"id": 5, "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HDFS",
         "description": "–í—ã–ø–æ–ª–Ω—è–µ—Ç health-check —Å–µ—Ä–≤–∏—Å–æ–≤ HDFS –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."},
        {"id": 6, "name": "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π",
         "description": "–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Hadoop."},
    ]
    return render_template('snos_scripts.html', scripts=scripts)

# üîß –ó–∞–≥–ª—É—à–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
@app.route('/scripts/run/<int:script_id>')
def run_script(script_id):
    return f"–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å ID {script_id}"


@app.route('/master-script', methods=['GET', 'POST'])
def master_script():
    checklist_items = [
        "–û–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö",
        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –¥–µ–º–æ–Ω—ã Hadoop",
        "–†–∞—Å–∫–∞—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Ambari",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å NameNode",
        "–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å cron –∑–∞–¥–∞—á–∏",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö",
        "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ HDFS",
        "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—ã –Ω–∞ –≤—Å–µ—Ö —É–∑–ª–∞—Ö",
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ—Ç—Ä–∏–∫–∞–º Prometheus"
    ]

    if request.method == 'POST':
        selected = request.form.getlist('checklist')
        ambari_url = request.form.get('ambari_url', '')
        return f"Ambari: {ambari_url}<br>–í—ã–±—Ä–∞–Ω—ã —à–∞–≥–∏: {', '.join(selected)}"

    return render_template('master_script.html', checklist=checklist_items)




if __name__ == '__main__':
    app.run(debug=True)
